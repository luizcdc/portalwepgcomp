// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Profile {
  DoctoralStudent
  Professor
  Listener
}

enum UserLevel {
  Superadmin
  Admin
  Default
}

enum CommitteeLevel {
  Committee
  Coordinator
}

enum Role {
  OrganizingCommittee
  StudentVolunteers
  AdministativeSupport
  Communication
  TISupport
}

enum PresentationStatus {
  ToPresent
  Presented
  NotPresented
}

enum SubmissionStatus {
  Submitted
  Confirmed
  Rejected
}

enum PresentationBlockType {
  General
  Presentation
}

model UserAccount {
  id                 String       @id @default(uuid())
  name               String       @db.VarChar(255)
  email              String       @unique @db.VarChar(255)
  password           String       @db.VarChar(255)
  registrationNumber String?      @unique @db.VarChar(20)
  photoFilePath      String?      @db.VarChar(255)
  profile            Profile      @default(DoctoralStudent)
  level              UserLevel    @default(Default)
  isActive           Boolean      @default(true)
  advisorFor         Submission[] @relation("AdvisorRelation")
  mainAuthored       Submission[] @relation("MainAuthorRelation")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())
  Committee          Committee[]
  Evaluation         Evaluation[]
}

model EventEdition {
  id                                String        @id @default(uuid())
  name                              String        @db.VarChar(255)
  description                       String        @db.Text
  callForPapersText                 String        @db.Text
  partnersText                      String        @db.Text
  url                               String        @db.VarChar(255)
  location                          String        @db.VarChar(255)
  startDate                         DateTime
  endDate                           DateTime
  submissionDeadline                DateTime
  isActive                          Boolean       @default(false)
  isEvaluationRestrictToLoggedUsers Boolean       @default(true)
  presentationDuration              Int
  presentationsPerPresentationBlock Int
  createdAt                         DateTime      @default(now())
  updatedAt                         DateTime      @default(now())
  submissions                       Submission[]
  Committee                         Committee[]
  Certificate                       Certificate[]
}

model Committee {
  id           String         @id @default(uuid())
  eventId      String
  userId       String
  level        CommitteeLevel
  role         Role
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  eventEdition EventEdition   @relation(fields: [eventId], references: [id])
  user         UserAccount    @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model EvaluationCriteria {
  id          String       @id @default(uuid())
  eventId     String
  title       String       @db.VarChar(255)
  description String       @db.Text
  weightRadio Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  Evaluation  Evaluation[]
}

model Evaluation {
  id                   String             @id @default(uuid())
  userId               String
  evaluationCriteriaId String
  submissionId         String
  workId               Int
  grade                Float
  comments             String?
  name                 String             @db.VarChar(255)
  email                String             @db.VarChar(255)
  expertise            String             @db.VarChar(255)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  user                 UserAccount        @relation(fields: [userId], references: [id])
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  submission           Submission         @relation(fields: [submissionId], references: [id])
}

model Submission {
  id           String           @id @default(uuid())
  advisorId    String
  mainAuthorId String
  eventId      String
  title        String           @db.VarChar(255)
  abstract     String           @db.Text
  pdfFile      String           @db.VarChar(255)
  phoneNumber  String           @db.VarChar(20)
  linkedInUrl  String?          @db.VarChar(255)
  ranking      Int?
  status       SubmissionStatus
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now())
  advisor      UserAccount      @relation("AdvisorRelation", fields: [advisorId], references: [id])
  mainAuthor   UserAccount      @relation("MainAuthorRelation", fields: [mainAuthorId], references: [id])
  eventEdition EventEdition     @relation(fields: [eventId], references: [id])
  Evaluation   Evaluation[]
  Presentation Presentation[]
  CoAuthor     CoAuthor[]
}

model Certificate {
  id           String       @id @default(uuid())
  eventId      String
  name         String       @db.VarChar(255)
  email        String       @db.VarChar(255)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  eventEdition EventEdition @relation(fields: [eventId], references: [id])
}

model PresentationBlock {
  id         String                @id @default(uuid())
  eventId    String
  roomId     String?
  type       PresentationBlockType
  title      String?               @db.VarChar(255)
  speakerName String?              @db.VarChar(255)
  startTime DateTime
  duration   Int
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @default(now())

  Presentation Presentation[]
}

model Presentation {
  id                              String             @id @default(uuid())
  submissionId                    String
  presentationBlockId             String
  positionWithinPresentationBlock String             @db.VarChar(255)
  status                          PresentationStatus
  createdAt                       DateTime           @default(now())
  updatedAt                       DateTime           @default(now())
  submission                      Submission         @relation(fields: [submissionId], references: [id])
  presentationBlock               PresentationBlock  @relation(fields: [presentationBlockId], references: [id])
}

model CoAuthor {
  id          String     @id @default(uuid())
  submisionId String
  name        String     @db.VarChar(255)
  institution String     @db.VarChar(255)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  submision   Submission @relation(fields: [submisionId], references: [id])
}
