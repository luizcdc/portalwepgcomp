// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Profile {
  DoctoralStudent
  Professor
  Listener
}

enum UserLevel {
  Superadmin
  Admin
  Default
}

enum CommitteeLevel {
  Committee
  Coordinator
}

enum CommitteeRole {
  OrganizingCommittee
  StudentVolunteers
  AdministativeSupport
  Communication
  ITSupport
}

enum PresentationStatus {
  ToPresent
  Presented
  NotPresented
}

enum SubmissionStatus {
  Submitted
  Confirmed
  Rejected
}

enum PanelistStatus {
  Pending
  Confirmed
  Rejected
  Present
  Missing
}

enum PresentationBlockType {
  General
  Presentation
}

model UserAccount {
  id                     String            @id @default(uuid())
  name                   String            @db.VarChar(255)
  email                  String            @unique @db.VarChar(255)
  password               String            @db.VarChar(255)
  registrationNumber     String?           @unique @db.VarChar(20)
  photoFilePath          String?           @db.VarChar(255)
  profile                Profile           @default(DoctoralStudent)
  level                  UserLevel         @default(Default)
  isActive               Boolean           @default(true)
  advisorFor             Submission[]      @relation("AdvisorRelation")
  mainAuthored           Submission[]      @relation("MainAuthorRelation")
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  committeeMemberships   CommitteeMember[]
  evaluations            Evaluation[]
  panelistAwards         AwardedPanelist[]
  panelistParticipations Panelist[]
}

model EventEdition {
  id                                String            @id @default(uuid())
  name                              String            @db.VarChar(255)
  description                       String            @db.Text
  callForPapersText                 String            @db.Text
  partnersText                      String            @db.Text
  url                               String            @db.VarChar(255)
  location                          String            @db.VarChar(255)
  startDate                         DateTime
  endDate                           DateTime
  submissionDeadline                DateTime
  isActive                          Boolean           @default(true)
  isEvaluationRestrictToLoggedUsers Boolean           @default(true)
  presentationDuration              Int               @default(20)
  presentationsPerPresentationBlock Int               @default(6)
  createdAt                         DateTime          @default(now())
  updatedAt                         DateTime          @updatedAt
  submissions                       Submission[]
  committeeMembers                  CommitteeMember[]
  certificates                      Certificate[]
  awardedPanelists                  AwardedPanelist[]
  rooms                             Room[]
}

model CommitteeMember {
  id             String         @id @default(uuid())
  eventEditionId String
  userId         String
  level          CommitteeLevel
  role           CommitteeRole
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  eventEdition   EventEdition   @relation(fields: [eventEditionId], references: [id])
  user           UserAccount    @relation(fields: [userId], references: [id])

  @@unique([eventEditionId, userId])
}

model EvaluationCriteria {
  id             String       @id @default(uuid())
  eventEditionId String
  title          String       @db.VarChar(255)
  description    String       @db.Text
  weightRadio    Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  evaluations    Evaluation[]
}

model Evaluation {
  id                   String             @id @default(uuid())
  userId               String?
  evaluationCriteriaId String
  submissionId         String
  score                Float
  comments             String?            @db.Text
  name                 String?            @db.VarChar(255)
  email                String?            @db.VarChar(255)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 UserAccount?       @relation(fields: [userId], references: [id])
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  submission           Submission         @relation(fields: [submissionId], references: [id])
}

model Submission {
  id             String           @id @default(uuid())
  advisorId      String
  mainAuthorId   String
  eventEditionId String
  title          String           @db.VarChar(255)
  abstract       String           @db.Text
  pdfFile        String           @db.VarChar(255)
  phoneNumber    String           @db.VarChar(20)
  linkedinUrl    String?          @db.VarChar(255)
  ranking        Int?
  status         SubmissionStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  advisor        UserAccount      @relation("AdvisorRelation", fields: [advisorId], references: [id])
  mainAuthor     UserAccount      @relation("MainAuthorRelation", fields: [mainAuthorId], references: [id])
  eventEdition   EventEdition     @relation(fields: [eventEditionId], references: [id])
  Evaluation     Evaluation[]
  Presentation   Presentation[]
  CoAuthor       CoAuthor[]

  @@map("submission")
}

model Panelist {
  id                  String            @id @default(uuid())
  presentationBlockId String
  userId              String
  status              PanelistStatus    @default(Confirmed)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  presentationBlock   PresentationBlock @relation(fields: [presentationBlockId], references: [id])
  user                UserAccount       @relation(fields: [userId], references: [id])
}

model AwardedPanelist {
  eventEditionId String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  eventEdition   EventEdition @relation(fields: [eventEditionId], references: [id])
  user           UserAccount  @relation(fields: [userId], references: [id])

  @@id([eventEditionId, userId])
}

model Room {
  id             String       @id @default(uuid())
  eventEditionId String
  name           String       @db.VarChar(255)
  description    String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  eventEdition   EventEdition @relation(fields: [eventEditionId], references: [id])
}

model Certificate {
  id             String       @id @default(uuid())
  eventEditionId String
  name           String       @db.VarChar(255)
  email          String       @db.VarChar(255)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  eventEdition   EventEdition @relation(fields: [eventEditionId], references: [id])
}

model PresentationBlock {
  id             String                @id @default(uuid())
  eventEditionId String
  roomId         String?
  type           PresentationBlockType
  title          String?               @db.VarChar(255)
  speakerName    String?               @db.VarChar(255)
  startTime      DateTime
  duration       Int
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  presentations Presentation[]
  panelists     Panelist[]
}

model Presentation {
  id                  String             @id @default(uuid())
  submissionId        String
  presentationBlockId String
  positionWithinBlock Int             
  status              PresentationStatus
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  submission          Submission         @relation(fields: [submissionId], references: [id])
  presentationBlock   PresentationBlock  @relation(fields: [presentationBlockId], references: [id])
}

model CoAuthor {
  id          String     @id @default(uuid()) @map("id")
  submisionId String     @map("submision_id")
  name        String     @map("name") @db.VarChar(255)
  institution String     @map("institution") @db.VarChar(255)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  submision   Submission @relation(fields: [submisionId], references: [id], onDelete: Cascade)

  @@map("co_author")
}
